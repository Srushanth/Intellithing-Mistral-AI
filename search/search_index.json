{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction \ud83d\ude80","text":""},{"location":"#overview","title":"Overview \ud83d\udcdd","text":"<p>This project aims to deploy a Mistral AI model from Hugging Face in an Amazon Elastic Kubernetes Service (EKS) environment, create an API for it, and use the API in a Gradio interface to test the model interactively. The project also requires the solution to have minimal standby servers and scale automatically as the requests or load increases. The project was assigned on 11-Dec-2023.</p> <p>The Mistral AI model is a large language model with 7 billion parameters that can generate text for various tasks. The EKS environment is a managed service that simplifies the deployment and management of Kubernetes clusters on AWS. The Gradio interface is a web-based GUI that allows users to interact with the model easily. The project uses various AWS services and tools, such as <code>VSCode</code>, <code>AWS CLI</code>, <code>EKS</code>, <code>ECS</code>, <code>EC2</code>, <code>VPC</code>, <code>IAM</code>, <code>k9s</code>, <code>eksctl</code>, and <code>Terraform</code> to create and configure the resources needed for the project.</p>"},{"location":"#project-structure","title":"Project Structure \ud83d\uddc2","text":"<pre><code>.\n\u251c\u2500\u2500 Dockerfile\n\u251c\u2500\u2500 LICENSE\n\u251c\u2500\u2500 Makefile\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 aws\n\u2502   \u251c\u2500\u2500 2048-pod.yaml\n\u2502   \u251c\u2500\u2500 del-LoadBalancer.yaml\n\u2502   \u251c\u2500\u2500 del-deployment.yaml\n\u2502   \u251c\u2500\u2500 deployment.yaml\n\u2502   \u251c\u2500\u2500 full.yaml\n\u2502   \u251c\u2500\u2500 iam_policy.json\n\u2502   \u251c\u2500\u2500 mygame-svc.yaml\n\u2502   \u251c\u2500\u2500 sample.yml\n\u2502   \u2514\u2500\u2500 service.yaml\n\u251c\u2500\u2500 docs\n\u2502   \u251c\u2500\u2500 Project-Setup.md\n\u2502   \u251c\u2500\u2500 images\n\u2502   \u2502   \u251c\u2500\u2500 vscode.png\n\u2502   \u2502   \u2514\u2500\u2500 vscode.svg\n\u2502   \u2514\u2500\u2500 index.md\n\u251c\u2500\u2500 mkdocs.yml\n\u251c\u2500\u2500 model_gguf\n\u2502   \u2514\u2500\u2500 mistral-7b-instruct-v0.1.Q5_K_M.gguf\n\u251c\u2500\u2500 notebooks\n\u2502   \u251c\u2500\u2500 1.download-model.ipynb\n\u2502   \u251c\u2500\u2500 1.gguf_model.ipynb\n\u2502   \u251c\u2500\u2500 1.guff-gradio.ipynb\n\u2502   \u251c\u2500\u2500 1.init.ipynb\n\u2502   \u251c\u2500\u2500 gptq.ipynb\n\u2502   \u251c\u2500\u2500 streamer.ipynb\n\u2502   \u2514\u2500\u2500 test.ipynb\n\u251c\u2500\u2500 requirements.txt\n\u251c\u2500\u2500 simple-bank\n\u2502   \u251c\u2500\u2500 deployment.yaml\n\u2502   \u2514\u2500\u2500 service.yaml\n\u2514\u2500\u2500 src\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 flagged\n    \u251c\u2500\u2500 main-stream.py\n    \u251c\u2500\u2500 main.py\n    \u2514\u2500\u2500 streamer.py\n</code></pre>"},{"location":"#clone-and-manage-the-repository","title":"Clone and manage the repository \ud83d\udee0","text":"<ol> <li>Clone the repository to your local machine by running <code>git clone https://github.com/Srushanth/Intellithing-Mistral-AI</code>. \ud83d\udda5</li> <li>Create a new branch for your feature or bug fix by running <code>git checkout -b &lt;branch_name&gt;</code>. \ud83c\udf3f</li> <li>Make your changes to the code and test them locally. \ud83e\uddea</li> <li>Commit your changes to the branch by running <code>git add .</code> and <code>git commit -m \"&lt;commit_message&gt;\"</code>. <ul> <li>Note: Use a meaningful and descriptive commit message that explains why you made the changes. \ud83d\udcac</li> </ul> </li> <li>Push your branch to the remote repository by running <code>git push origin &lt;branch_name&gt;</code>. \ud83d\ude80</li> <li>Create a pull request to merge your branch to the master branch. <ul> <li>Note: Use a clear and concise title and description for your pull request and assign a reviewer to approve it. \ud83d\ude4b\u200d\u2642\ufe0f</li> </ul> </li> <li>Wait for the reviewer to review your code and provide feedback. If there are any issues or suggestions, make the necessary changes and push them to the branch. \ud83d\udd04</li> <li>Once the reviewer approves your pull request, merge it to the master branch. \ud83c\udf89</li> </ol> <p>This is a maths equation \\(\\(f(x) = 4y + 5\\)\\)</p>"},{"location":"Project-Setup/","title":"Project Setup \ud83d\ude80","text":"<p>In this project, we will use VSCode, Anaconda, AWS CLI, AWS ECR, and AWS EKS to deploy a Mistral AI model from Hugging Face. Here are the steps to set up the project:</p>"},{"location":"Project-Setup/#setup-ssh-in-vscode","title":"Setup SSH in VSCode \ud83d\udd11","text":"<p>To connect to the remote server using SSH, we need to add the following property to the <code>~.ssh/config</code> file on our local machine: <pre><code>Host dev-gpu\n    HostName ec2-16-16-76-171.eu-north-1.compute.amazonaws.com\n    User ubuntu\n    IdentityFile C:\\Users\\Srush\\Downloads\\dev-pem.pem\n</code></pre> This will allow us to use the <code>dev-gpu</code> alias to access the server.</p>"},{"location":"Project-Setup/#install-anaconda","title":"Install Anaconda \ud83d\udc0d","text":"<p>To install Anaconda, a Python distribution that comes with many useful packages and tools, we need to run the following commands on the server: <pre><code>curl -O https://repo.anaconda.com/archive/Anaconda3-2023.09-0-Linux-x86_64.sh\nbash ./Anaconda3-2023.09-0-Linux-x86_64.sh\nrm -f Anaconda3-2023.09-0-Linux-x86_64.sh\n</code></pre> This will download, install, and remove the Anaconda installer script.</p>"},{"location":"Project-Setup/#setup-aws-cli","title":"Setup AWS CLI \u2601\ufe0f","text":"<p>To interact with AWS services from the command line, we need to install and configure the AWS CLI. We can do that by running the following commands on the server: <pre><code>curl \"https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip\" -o \"awscliv2.zip\"\nunzip awscliv2.zip\nsudo ./aws/install\naws configure\n</code></pre> This will download, unzip, install, and configure the AWS CLI. We will need to provide our AWS access key ID, secret access key, default region, and default output format.</p>"},{"location":"Project-Setup/#login-to-aws-ecr","title":"Login to AWS ECR \ud83d\udc33","text":"<p>To push and pull Docker images from the AWS Elastic Container Registry (ECR), we need to login to the ECR service using the AWS CLI. We can do that by running the following command on the server: <pre><code>aws --region &lt;region&gt; ecr get-login-password | docker login --username AWS --password-stdin &lt;Account ID (12 digits)&gt;.dkr.ecr.&lt;region&gt;.amazonaws.com\n</code></pre> This will generate a login password and use it to authenticate with the ECR service. We will need to replace <code>&lt;region&gt;</code> and <code>&lt;Account ID (12 digits)&gt;</code> with our own values.</p>"},{"location":"Project-Setup/#login-to-aws-eks","title":"Login to AWS EKS \ud83c\udf10","text":"<p>To manage our Kubernetes cluster on the AWS Elastic Kubernetes Service (EKS), we need to login to the EKS service using the AWS CLI. We can do that by running the following command on the server: <pre><code>aws eks --region &lt;region&gt; update-kubeconfig --name &lt;cluster-name&gt;\n</code></pre> This will update our kubeconfig file with the EKS cluster information. We will need to replace <code>&lt;region&gt;</code> and <code>&lt;cluster-name&gt;</code> with our own values.</p> <p>That\u2019s it! We have successfully set up the project. We can now proceed to the next steps. \ud83d\ude0a</p>"}]}